//HILL CIPHER


 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
 #define SIZE 3
 #define MAX_SIZE 100 // Maximum size of input string
 int mod26(int x) { return (x % 26 + 26) % 26; }
 int modInverse(int a) {
    a = mod26(a);
    for (int x = 1; x < 26; x++)
        if(mod26(a * x) == 1) 
          return x;
    return -1;
 }
 int determinant(int m[SIZE][SIZE]) {
    return mod26(m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1])- 
                   m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) +
                   m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0]));
 }
 int matrixInverse(int key[SIZE][SIZE], int inv[SIZE][SIZE]) {
    int det = determinant(key), detInv = modInverse(det), sub[2][2];
    if (detInv == -1) return printf("Key not invertible.\n"), 0;
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++) {
            int r = 0, c = 0;
            for (int x = 0; x < SIZE; x++)
                {if(x != i)
                   { for (int y = 0; y < SIZE; y++)
                        if(y != j) sub[r][c++] = key[x][y];
                   }
                }
    inv[j][i] = mod26(((i + j) % 2 ? -1 : 1) * (sub[0][0] * sub[1][1] - sub[0][1] * sub[1][0]) * detInv);
        }
    return 1;
 }
 void process(char *in, char *out, int key[SIZE][SIZE], int enc) {
    int vec[SIZE], res[SIZE], invKey[SIZE][SIZE];
    if (!enc && !matrixInverse(key, invKey)) return;
    int inLen = strlen(in);
    for (int i = 0; i < inLen; i += SIZE) {
        if
 (i + SIZE > MAX_SIZE) return; // Prevent out of bound write
        for (int j = 0; j < SIZE; j++) vec[j] = in[i + j] - 'A';
        for (int j = 0; j < SIZE; j++) {
            res[j] = 0;
            for (int k = 0; k < SIZE; k++) res[j] += vec[k] * (enc ? key[k][j] : invKey[k][j]);
            out[i + j] = mod26(res[j]) + 'A';
        }
    }
    out[inLen] = '\0';
 }
 int main() {
    char p[MAX_SIZE + SIZE], c[MAX_SIZE + SIZE], d[MAX_SIZE + SIZE];
    int k[SIZE][SIZE];
    printf("Key:\n");
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if(scanf("%d", &k[i][j]) != 1) {
                printf("Invalid Key.\n");
                return 1;
            }
    printf("Plaintext:\n");
    if (scanf("%s", p) != 1) {
        printf("Invalid Plaintext.\n");
        return 1;
    }
    int pLen = strlen(p);
    int pad = (SIZE - pLen % SIZE) % SIZE;
    if(pLen + pad > MAX_SIZE){
        printf("Plaintext too large after padding.\n");
        return 1;
    }
    for (int i = pLen; i < pLen + pad; i++) p[i] = 'X';
    p[pLen + pad] = '\0';
    process(p, c, k, 1);
    printf("Ciphertext: %s\n", c);
    process(c, d, k, 0);
    printf("Decrypted: %s\n", d);
    return 0;
 }
