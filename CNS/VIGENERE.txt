//VIGENERE

#include <stdio.h>
#include <string.h>
#include <ctype.h>


void cleanKey(char* key) {
    int i = 0;
    while (key[i]) {
        key[i] = toupper(key[i]);
        i++;
    }
}


void encrypt(char* plaintext, char* key, char* ciphertext) {
    int i = 0, j = 0;
    int len_plaintext = strlen(plaintext);
    int len_key = strlen(key);

    while (i < len_plaintext) {
        if (isalpha(plaintext[i])) {
            char shift = key[j % len_key] - 'A';
            if (isupper(plaintext[i])) {
                ciphertext[i] = ((plaintext[i] - 'A' + shift) % 26) + 'A';
            } else {
                ciphertext[i] = ((plaintext[i] - 'a' + shift) % 26) + 'a';
            }
            j++;
        } else {
            ciphertext[i] = plaintext[i];
        }
        i++;
    }
    ciphertext[i] = '\0';
}


void decrypt(char* ciphertext, char* key, char* plaintext) {
    int i = 0, j = 0;
    int len_ciphertext = strlen(ciphertext);
    int len_key = strlen(key);

    while (i < len_ciphertext) {
        if (isalpha(ciphertext[i])) {
            char shift = key[j % len_key] - 'A';
            if (isupper(ciphertext[i])) {
                plaintext[i] = ((ciphertext[i] - 'A' - shift + 26) % 26) + 'A';
            } else {
                plaintext[i] = ((ciphertext[i] - 'a' - shift + 26) % 26) + 'a';
            }
            j++;
        } else {
            plaintext[i] = ciphertext[i];
        }
        i++;
    }
    plaintext[i] = '\0';
}

int main() {
    char plaintext[1000], ciphertext[1000], decrypted[1000], key[1000];


    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0;

    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = 0;


    cleanKey(key);


    encrypt(plaintext, key, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);


    decrypt(ciphertext, key, decrypted);
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}


//RAIL FENCE

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_TEXT_LENGTH 1000

void encryptRailFence(char *plaintext, int key, char *ciphertext) {
    int len = strlen(plaintext);
    char rail[key][len];

    // Initialize rail matrix
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\n';

    int row = 0, direction = 1;

    // Mark the positions
    for (int i = 0; i < len; i++) {
        rail[row][i] = plaintext[i];

        if (row == 0)
            direction = 1;
        else if (row == key - 1)
            direction = -1;

        row += direction;
    }

    // Read the rail matrix to get ciphertext
    int index = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] != '\n')
                ciphertext[index++] = rail[i][j];

    ciphertext[index] = '\0'; // Null-terminate string
}

void decryptRailFence(char *ciphertext, int key, char *plaintext) {
    int len = strlen(ciphertext);
    char rail[key][len];

    // Initialize rail matrix
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\n';

    int row = 0, direction = 1;

    // Mark positions
    for (int i = 0; i < len; i++) {
        rail[row][i] = '*';

        if (row == 0)
            direction = 1;
        else if (row == key - 1)
            direction = -1;

        row += direction;
    }

    // Fill the rail matrix with cipher text
    int index = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] == '*' && index < len)
                rail[i][j] = ciphertext[index++];

    // Read decrypted text
    row = 0, direction = 1;
    for (int i = 0; i < len; i++) {
        plaintext[i] = rail[row][i];

        if (row == 0)
            direction = 1;
        else if (row == key - 1)
            direction = -1;

        row += direction;
    }

    plaintext[len] = '\0'; // Null-terminate the string
}

int main() {
    char plaintext[MAX_TEXT_LENGTH], ciphertext[MAX_TEXT_LENGTH], decrypted[MAX_TEXT_LENGTH];
    int key;

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline character

    printf("Enter key: ");
    scanf("%d", &key);

    encryptRailFence(plaintext, key, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    decryptRailFence(ciphertext, key, decrypted);
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}